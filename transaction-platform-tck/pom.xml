<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>fish.payara.jakarta.tests.tck</groupId>
        <artifactId>tck</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>transaction-platform-tck</artifactId>

    <properties>
        <ts.home>${basedir}/jakartaeetck</ts.home>
    </properties>

    <dependencies>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>transactions-tck</artifactId>
            <version>${jakarta.tck.platform.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-container</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.container</groupId>
            <artifactId>arquillian-container-spi</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-javatest</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.jboss.shrinkwrap.resolver</groupId>
                    <artifactId>shrinkwrap-resolver-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.shrinkwrap.resolver</groupId>
                    <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.shrinkwrap.resolver</groupId>
                    <artifactId>shrinkwrap-resolver-api-maven</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.shrinkwrap.resolver</groupId>
                    <artifactId>shrinkwrap-resolver-spi-maven</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>tck-porting-lib</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-lib</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-appclient</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commons-codec.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>Start Domain</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>start-domain</argument>
                            </arguments>
                            <successCodes>
                                <successCode>0</successCode>
                                <successCode>1</successCode>
                            </successCodes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Create Connection Pool</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-jdbc-connection-pool</argument>
                                <argument>--restype</argument>
                                <argument>javax.sql.DataSource</argument>
                                <argument>--datasourceclassname</argument>
                                <argument>org.apache.derby.jdbc.ClientDataSource</argument>
                                <argument>--property</argument>
                                <argument>DatabaseName=${payara.home}/javadb/derbyDB:serverName=localhost:portNumber=1527:user=cts1:password=cts1</argument>
                                <argument>--steadypoolsize</argument>
                                <argument>32</argument>
                                <argument>--maxpoolsize</argument>
                                <argument>64</argument>
                                <argument>cts-derby-pool</argument>
                            </arguments>
                            <successCodes>
                                <successCode>0</successCode>
                                <successCode>1</successCode>
                            </successCodes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Create JDBC Resource</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-jdbc-resource</argument>
                                <argument>--connectionpoolid</argument>
                                <argument>cts-derby-pool</argument>
                                <argument>jdbc/DB1</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Stop Domain</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>stop-domain</argument>
                            </arguments>
                            <successCodes>
                                <successCode>0</successCode>
                                <successCode>1</successCode>
                            </successCodes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>download-derby</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>${derby.zip.url}</url>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <skip>${skipConfig}</skip>
                    <unpack>true</unpack>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-derby-to-payara</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <target>
                                <move todir="${payara.home}${file.separator}javadb">
                                    <fileset
                                            dir="${project.build.directory}${file.separator}db-derby-${derby.version}-bin"/>
                                </move>
                                <copy file="${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbytools.jar"
                                      todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                                <copy file="${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbyclient.jar"
                                      todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                                <copy file="${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbyshared.jar"
                                      todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>start-database</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <target>
                                <exec executable="${payara.db.home}${file.separator}bin${file.separator}startNetworkServer${script.extension}"
                                      spawn="true" dir="${payara.db.home}"/>
                                <echo message="Waiting 3 seconds for database in forked process to start..."/>
                                <sleep seconds="3"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-database</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop</skip>
                            <target>
                                <exec executable="${payara.db.home}${file.separator}bin${file.separator}stopNetworkServer${script.extension}"
                                      dir="${payara.db.home}"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>sql-maven-plugin</artifactId>
                <!-- common configuration shared by all executions -->
                <dependencies>
                    <dependency>
                        <groupId>org.apache.derby</groupId>
                        <artifactId>derbyclient</artifactId>
                        <version>${derby.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.derby</groupId>
                        <artifactId>derbytools</artifactId>
                        <version>${derby.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <skip>${skipConfig}</skip>
                    <driver>org.apache.derby.jdbc.ClientDriver</driver>
                    <url>jdbc:derby://localhost:1527/derbyDB;create=true</url>
                    <username>CTS1</username>
                    <password>CTS1</password>
                    <autocommit>true</autocommit>
                    <delimiter>;</delimiter>
                    <onError>continue</onError>
                </configuration>
                <executions>
                    <execution>
                        <id>sql-cli</id>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <srcFiles>
                                <srcFile>sql${file.separator}derby${file.separator}derby.ddl.sql</srcFile>
                            </srcFiles>
                            <sqlCommand>CREATE SCHEMA CTS1 AUTHORIZATION CTS1;</sqlCommand>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>transactions-platform-tck</id>
                        <goals>
                            <goal>verify</goal>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <dependenciesToScan>jakarta.tck:transactions-tck</dependenciesToScan>
                            <groups>${jakarta.javatest.group}</groups>

                            <includes>
                                <include>com/sun/ts/tests/jta/ee/transactional/ClientEjblitejspTest*.java</include>
                                <include>com/sun/ts/tests/jta/ee/transactional/ClientEjbliteservletTest*.java</include>
                                <include>com/sun/ts/tests/jta/ee/transactional/ClientEjbliteservlet2Test*.java</include>
                                <include>com/sun/ts/tests/jta/ee/transactional/ClientEjblitejsfTest*.java</include>
                                <include>com/sun/ts/tests/jta/ee/txpropagationtest/ClientServletTest*.java</include>
                                <include>com/sun/ts/tests/jta/ee/txpropagationtest/ClientJspTest*.java</include>
                                <include>com/sun/ts/tests/jta/ee/usertransaction/**/*JspTest*.java</include>
                                <include>com/sun/ts/tests/jta/ee/usertransaction/**/*ServletTest*.java</include>
                            </includes>

                            <systemPropertyVariables>
                                <payara.home>${payara.home}</payara.home>
                                <arquillian.launch>tck-javatest</arquillian.launch>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>appclient</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-lib</id>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <phase>generate-resources</phase>
                                <configuration>
                                    <skip>${skipConfig}</skip>
                                    <artifactItems>
                                        <!-- The application client container needs these two dependencies -->
                                        <artifactItem>
                                            <groupId>jakarta.tck.arquillian</groupId>
                                            <artifactId>tck-porting-lib</artifactId>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                            <destFileName>tck-porting-lib.jar</destFileName>
                                        </artifactItem>
                                        <artifactItem>
                                            <groupId>jakarta.tck.arquillian</groupId>
                                            <artifactId>arquillian-protocol-lib</artifactId>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                            <destFileName>arquillian-protocol-lib.jar</destFileName>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transactions-tests-appclient</id>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                                <configuration>
                                    <dependenciesToScan>jakarta.tck:transactions-tck</dependenciesToScan>
                                    <groups>tck-appclient</groups>
                                    <includes>
                                        <include>com/sun/ts/tests/jta/ee/txpropagationtest/*Ejb*.java</include>
                                        <include>com/sun/ts/tests/jta/ee/usertransaction/**/*EjbTest*.java</include>
                                    </includes>

                                    <systemPropertyVariables>
                                        <ts.home>${ts.home}</ts.home>

                                        <payara.home>${payara.home}</payara.home>
                                        <harness.log.traceflag>true</harness.log.traceflag>
                                        <cts.harness.debug>true</cts.harness.debug>
                                        <project.basedir>${project.basedir}</project.basedir>
                                        <arquillian.launch>tck-appclient</arquillian.launch>                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>