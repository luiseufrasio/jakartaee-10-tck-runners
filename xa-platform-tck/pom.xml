<?xml version="1.0" encoding="UTF-8"?>
<!--
  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

  Copyright (c) 2024-2025 Payara Foundation and/or its affiliates. All rights reserved.

  The contents of this file are subject to the terms of either the GNU
  General Public License Version 2 only ("GPL") or the Common Development
  and Distribution License("CDDL") (collectively, the "License").  You
  may not use this file except in compliance with the License.  You can
  obtain a copy of the License at
  https://github.com/payara/Payara/blob/master/LICENSE.txt
  See the License for the specific
  language governing permissions and limitations under the License.

  When distributing the software, include this License Header Notice in each
  file and include the License file at glassfish/legal/LICENSE.txt.

  GPL Classpath Exception:
  The Payara Foundation designates this particular file as subject to the "Classpath"
  exception as provided by the Payara Foundation in the GPL Version 2 section of the License
  file that accompanied this code.

  Modifications:
  If applicable, add the following below the License Header, with the fields
  enclosed by brackets [] replaced by your own identifying information:
  "Portions Copyright [year] [name of copyright owner]"

  Contributor(s):
  If you wish your version of this file to be governed by only the CDDL or
  only the GPL Version 2, indicate your decision by adding "[Contributor]
  elects to include this software in this distribution under the [CDDL or GPL
  Version 2] license."  If you don't indicate a single choice of license, a
  recipient has the option to distribute your version of this file under
  either the CDDL, the GPL Version 2 or to extend the choice of license to
  its licensees as provided above.  However, if you add GPL Version 2 code
  and therefore, elected the GPL Version 2 license, then the option applies
  only if the new code is made subject to such option by the copyright
  holder.

-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>fish.payara.jakarta.tests.tck</groupId>
        <artifactId>tck</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>xa-platform-tck</artifactId>

    <properties>
        <connectionpoolid>cts-derby-pool</connectionpoolid>

        <!--- derby properties -->
        <derby.dbName>derbyDB</derby.dbName>
        <derby.passwd>cts1</derby.passwd>
        <derby.port>1527</derby.port>
        <derby.server>localhost</derby.server>
        <derby.user>cts1</derby.user>

        <!-- glassfish properties -->
        <javadb.lib>${payara.db.home}${file.separator}lib</javadb.lib>

        <!-- JDBC properties -->
        <jdbc.db>derby</jdbc.db>

        <sql.directory>${project.basedir}${file.separator}sql</sql.directory>
        <whitebox.directory>target${file.separator}whiteboxes</whitebox.directory>

        <!-- XA properties -->
        <xa.datasource.class>org.apache.derby.jdbc.ClientXADataSource</xa.datasource.class>
        <xa.maxpoolsize>64</xa.maxpoolsize>
        <xa.poolName>cts-derby-XA-pool</xa.poolName>
        <xa.properties>serverName=${derby.server}:portNumber=${derby.port}:user=${derby.user}:password=${derby.passwd}:DatabaseName=${derby.dbName}:connectionAttributes=";create\=true;"</xa.properties>
        <xa.restype>javax.sql.XADataSource</xa.restype>
        <xa.steadypoolsize>32</xa.steadypoolsize>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>jakarta.tck</groupId>
                <artifactId>artifacts-bom</artifactId>
                <version>${jakarta.tck.platform.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>common</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>xa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.container</groupId>
            <artifactId>arquillian-container-test-spi</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-container</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-appclient</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-javatest</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-lib</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>tck-porting-lib</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>whitebox</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>mdcomplete</artifactId>
            <type>rar</type>
        </dependency>
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derbyclient</artifactId>
            <version>${derby.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derbytools</artifactId>
            <version>${derby.version}</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>download-derby</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>${derby.zip.url}</url>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <skip>${skipTests}</skip>
                    <unpack>true</unpack>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-libs</id>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>whitebox</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${payara.home}${file.separator}glassfish${file.separator}lib</outputDirectory>
                                    <destFileName>whitebox.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck.arquillian</groupId>
                                    <artifactId>arquillian-protocol-lib</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${payara.home}${file.separator}glassfish${file.separator}lib</outputDirectory>
                                    <destFileName>arquillian-protocol-lib.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck.arquillian</groupId>
                                    <artifactId>tck-porting-lib</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${payara.home}${file.separator}glassfish${file.separator}lib</outputDirectory>
                                    <destFileName>tck-porting-lib.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>org.apache.derby</groupId>
                                    <artifactId>derbyclient</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${payara.home}${file.separator}glassfish${file.separator}lib</outputDirectory>
                                    <destFileName>derbyclient.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>org.apache.derby</groupId>
                                    <artifactId>derbytools</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${payara.home}${file.separator}glassfish${file.separator}lib</outputDirectory>
                                    <destFileName>derbytools.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck.arquillian</groupId>
                                    <artifactId>arquillian-protocol-lib</artifactId>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.directory}/protocol</outputDirectory>
                                    <destFileName>protocol.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                    <execution>
                        <id>install-whiteboxes</id>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <phase>initialize</phase>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>whitebox</artifactId>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox.jar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>annotated</artifactId>
                                    <version>${jakarta.tck.platform.version}</version>
                                    <type>rar</type>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox-anno_no_md.rar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>ibanno</artifactId>
                                    <version>${jakarta.tck.platform.version}</version>
                                    <type>rar</type>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox-ibanno_no_md.rar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>mdcomplete</artifactId>
                                    <type>rar</type>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox-mdcomplete.rar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>mixedmode</artifactId>
                                    <type>rar</type>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox-mixedmode.rar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>multianno</artifactId>
                                    <type>rar</type>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox-multianno.rar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>whitebox-notx</artifactId>
                                    <type>rar</type>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox-notx.rar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>whitebox-notx-param</artifactId>
                                    <type>rar</type>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox-notx-param.rar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>whitebox-tx</artifactId>
                                    <type>rar</type>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox-tx.rar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>whitebox-tx-param</artifactId>
                                    <type>rar</type>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox-tx-param.rar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>whitebox-xa</artifactId>
                                    <type>rar</type>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox-xa.rar</destFileName>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>whitebox-xa-param</artifactId>
                                    <type>rar</type>
                                    <outputDirectory>${whitebox.directory}</outputDirectory>
                                    <destFileName>whitebox-xa-param.rar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-derby-to-payara</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <target unless="skip.setup">
                                <move todir="${payara.home}${file.separator}javadb">
                                    <fileset
                                            dir="${project.build.directory}${file.separator}db-derby-${derby.version}-bin"/>
                                </move>
                                <copy file="${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbytools.jar"
                                      todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                                <copy file="${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbyclient.jar"
                                      todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                                <copy file="${payara.home}${file.separator}javadb${file.separator}lib${file.separator}derbyshared.jar"
                                      todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>start-database</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <target>
                                <exec executable="${payara.db.home}${file.separator}bin${file.separator}startNetworkServer${script.extension}"
                                      spawn="true" dir="${payara.db.home}"/>
                                <echo message="Waiting 3 seconds for database in forked process to start..."/>
                                <sleep seconds="3"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-database</id>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <target>
                                <exec executable="${payara.home}${file.separator}javadb${file.separator}bin${file.separator}stopNetworkServer" dir="${project.build.directory}" />
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>sql-maven-plugin</artifactId>
                <!-- common configuration shared by all executions -->
                <configuration>
                    <driver>org.apache.derby.jdbc.ClientDriver</driver>
                    <url>jdbc:derby://localhost:1527/derbyDB;create=true</url>
                    <username>CTS1</username>
                    <password>CTS1</password>
                    <autocommit>true</autocommit>
                    <delimiter>;</delimiter>
                    <onError>continue</onError>
                </configuration>
                <dependencies>
                    <!-- specify the dependent jdbc driver here -->
                    <dependency>
                        <groupId>org.apache.derby</groupId>
                        <artifactId>derbyclient</artifactId>
                        <version>${derby.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.derby</groupId>
                        <artifactId>derbytools</artifactId>
                        <version>${derby.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>sql-cli</id>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <srcFiles>
                                <srcFile>${sql.directory}${file.separator}${jdbc.db}${file.separator}${jdbc.db}.ddl.sql</srcFile>
                                <srcFile>${sql.directory}${file.separator}${jdbc.db}${file.separator}${jdbc.db}.ddl.sprocs.sql</srcFile>
                            </srcFiles>
                            <sqlCommand>CREATE SCHEMA CTS1 AUTHORIZATION CTS1;</sqlCommand>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-jars</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <phase>generate-sources</phase>
                        <configuration>
                            <outputDirectory>${payara.home}${file.separator}glassfish${file.separator}lib</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${basedir}</directory>
                                    <includes>
                                        <include>*.jar</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>start-domain-for-config</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>start-domain</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-xa-jdbc-pool</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-jdbc-connection-pool</argument>
                                <argument>--restype</argument>
                                <argument>${xa.restype}</argument>
                                <argument>--datasourceclassname</argument>
                                <argument>${xa.datasource.class}</argument>
                                <argument>--property</argument>
                                <argument>${xa.properties}</argument>
                                <argument>--steadypoolsize</argument>
                                <argument>${xa.steadypoolsize}</argument>
                                <argument>--maxpoolsize</argument>
                                <argument>${xa.maxpoolsize}</argument>
                                <argument>${xa.poolName}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-JDBCwhitebox-xa</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-jdbc-resource</argument>
                                <argument>--connectionpoolid</argument>
                                <argument>${xa.poolName}</argument>
                                <argument>eis/JDBCwhitebox-xa</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-JDBCwhitebox-tx</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-jdbc-resource</argument>
                                <argument>--connectionpoolid</argument>
                                <argument>${xa.poolName}</argument>
                                <argument>eis/JDBCwhitebox-tx</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-JDBCwhitebox-notx</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-jdbc-resource</argument>
                                <argument>--connectionpoolid</argument>
                                <argument>${xa.poolName}</argument>
                                <argument>eis/JDBCwhitebox-notx</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>deploy-whitebox-tx-connector</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>deploy</argument>
                                <argument>${whitebox.directory}/whitebox-tx.rar</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-whitebox-tx-connector-pool</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-connector-connection-pool</argument>
                                <argument>--raname</argument>
                                <argument>whitebox-tx</argument>
                                <argument>--property</argument>
                                <argument>user=cts1:password=cts1:TSRValue=comp/TransactionSynchronizationRegistry
                                </argument>
                                <argument>--connectiondefinition</argument>
                                <argument>com.sun.ts.tests.common.connector.whitebox.TSConnectionFactory</argument>
                                <argument>whitebox-tx-pool</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-whitebox-tx-connector-resource</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-connector-resource</argument>
                                <argument>--poolname</argument>
                                <argument>whitebox-tx-pool</argument>
                                <argument>eis/whitebox-tx</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>deploy-whitebox-xa-connector</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>deploy</argument>
                                <argument>${whitebox.directory}/whitebox-xa.rar</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-whitebox-xa-connector-pool</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-connector-connection-pool</argument>
                                <argument>--raname</argument>
                                <argument>whitebox-xa</argument>
                                <argument>--property</argument>
                                <argument>user=cts1:password=cts1:TSRValue=comp/TransactionSynchronizationRegistry
                                </argument>
                                <argument>--connectiondefinition</argument>
                                <argument>com.sun.ts.tests.common.connector.whitebox.TSConnectionFactory</argument>
                                <argument>whitebox-xa-pool</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-whitebox-xa-connector-resource</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-connector-resource</argument>
                                <argument>--poolname</argument>
                                <argument>whitebox-xa-pool</argument>
                                <argument>eis/whitebox-xa</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>deploy-whitebox-notx-connector</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>deploy</argument>
                                <argument>${whitebox.directory}/whitebox-notx.rar</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-whitebox-notx-connector-pool</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-connector-connection-pool</argument>
                                <argument>--raname</argument>
                                <argument>whitebox-notx</argument>
                                <argument>--property</argument>
                                <argument>user=cts1:password=cts1:TSRValue=comp/TransactionSynchronizationRegistry
                                </argument>
                                <argument>--connectiondefinition</argument>
                                <argument>com.sun.ts.tests.common.connector.whitebox.TSConnectionFactory</argument>
                                <argument>whitebox-notx-pool</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-whitebox-notx-connector-resource</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-connector-resource</argument>
                                <argument>--poolname</argument>
                                <argument>whitebox-notx-pool</argument>
                                <argument>eis/whitebox-notx</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-domain-after-config</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>stop-domain</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>xa-javatest-tests</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <dependenciesToScan>jakarta.tck:xa</dependenciesToScan>
                            <additionalClasspathElements>
                                <additionalClasspathElement>${javadb.lib}${file.separator}derbytools.jar</additionalClasspathElement>
                                <additionalClasspathElement>${javadb.lib}${file.separator}derbyclient.jar</additionalClasspathElement>
                                <additionalClasspathElement>${javadb.lib}${file.separator}derby.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}glassfish${file.separator}modules${file.separator}glassfish-naming.jar</additionalClasspathElement>
                            </additionalClasspathElements>
                            <systemPropertyVariables>
                                <payara.home>${payara.home}</payara.home>
                                <ts.home>${project.basedir}/jakartaeetck</ts.home>
                                <project.basedir>${project.basedir}</project.basedir>
                                <arquillian.xml>arquillian.xml</arquillian.xml>
                            </systemPropertyVariables>
                            <includes>
                                <include>**/*Servlet*.*</include>
                                <include>**/*JSP*.*</include>
                            </includes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>xa-appclient-tests</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <dependenciesToScan>jakarta.tck:xa</dependenciesToScan>
                            <additionalClasspathElements>
                                <additionalClasspathElement>${javadb.lib}${file.separator}derbytools.jar</additionalClasspathElement>
                                <additionalClasspathElement>${javadb.lib}${file.separator}derbyclient.jar</additionalClasspathElement>
                                <additionalClasspathElement>${javadb.lib}${file.separator}derby.jar</additionalClasspathElement>
                                <additionalClasspathElement>${payara.home}${file.separator}glassfish${file.separator}modules${file.separator}glassfish-naming.jar</additionalClasspathElement>
                            </additionalClasspathElements>
                            <systemPropertyVariables>
                                <payara.home>${payara.home}</payara.home>
                                <java.naming.factory.initial>com.sun.enterprise.naming.impl.SerialInitContextFactory</java.naming.factory.initial>
                                <ts.home>${project.basedir}/jakartaeetck</ts.home>
                                <project.basedir>${project.basedir}</project.basedir>
                                <arquillian.xml>appclient-arquillian.xml</arquillian.xml>
                            </systemPropertyVariables>
                            <includes>
                                <include>**/*EJB*.*</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>